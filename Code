#Extracting zip file
import zipfile
import os

file = 'new.zip'

with zipfile.ZipFile(file, 'r') as zip_ref:
    zip_ref.extractall('./')
os.remove(file)

#Model training
import os
import numpy as np
from sklearn import svm
from tensorflow.keras.preprocessing.image import img_to_array, load_img
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.preprocessing.image import ImageDataGenerator


dataset_dir = 'new'


image_size = (224, 224) 


cnn_model = MobileNetV2(weights='imagenet', include_top=False, input_shape=(224, 224, 3))


def extract_features(image_path):
    image = load_img(image_path, target_size=image_size)
    image = img_to_array(image)
    image = np.expand_dims(image, axis=0)
    image = image / 255.0 
    features = cnn_model.predict(image)
    features = np.reshape(features, (features.shape[0], -1))
    return features


features = []
labels = []

data_augmentation = ImageDataGenerator(
    rotation_range=20, 
    width_shift_range=0.2,  
    height_shift_range=0.2,  
    shear_range=0.2, 
    zoom_range=0.2, 
    horizontal_flip=True,  
    fill_mode='nearest'  
)

for class_folder in os.listdir(dataset_dir):
    class_path = os.path.join(dataset_dir, class_folder)
    if os.path.isdir(class_path):
        for image_name in os.listdir(class_path):
            image_path = os.path.join(class_path, image_name)
            image_features = extract_features(image_path)
            features.append(image_features)
            labels.append(class_folder)

            image = load_img(image_path, target_size=image_size)
            image = img_to_array(image)
            image = np.expand_dims(image, axis=0)
            augmented_images = data_augmentation.flow(image, batch_size=8)
            for i, augmented_image in enumerate(augmented_images):
                augmented_image_features = cnn_model.predict(augmented_image / 255.0)
                augmented_image_features = np.reshape(augmented_image_features, (augmented_image_features.shape[0], -1))
                features.append(augmented_image_features)
                labels.append(class_folder)
                if i == 10: 
                    break

